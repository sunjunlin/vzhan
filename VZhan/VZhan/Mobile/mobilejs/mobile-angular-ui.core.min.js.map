{"version":3,"sources":["fastclick.js","activeLinks.js","capture.js","outerClick.js","sharedState.js","touchmoveDefaults.js"],"names":[],"mappings":"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","file":"mobile-angular-ui.core.min.js","sourcesContent":["(function () {\n  'use strict';\n  var module = angular.module('mobile-angular-ui.core.fastclick', []);\n\n  module.run(function() {\n    if ('addEventListener' in document) {\n      document.addEventListener('DOMContentLoaded', function() {\n          FastClick.attach(document.body);\n      }, false);\n    }\n  });\n\n  angular.forEach(['select', 'input', 'textarea'], function(directiveName){\n    module.directive(directiveName, function(){\n      return {\n        restrict: 'E',\n        compile: function(elem) {\n          elem.addClass('needsclick');\n        }\n      };\n    });\n  });\n}());","/**\n@module mobile-angular-ui.core.activeLinks\n@description\n\n`mobile-angular-ui.activeLinks` module sets up `.active` class for `a` elements those `href` attribute matches the current angular `$location` url. It takes care of excluding both search part and hash part from comparison.\n\n`.active` classes are added/removed each time one of `$locationChangeSuccess` or `$includeContentLoaded` is fired.\n\n## Usage\n\nJust declare it as a dependency to your app unless you have already included one of its super-modules.\n\n```\nangular.module('myApp', ['mobile-angular-ui.core.activeLinks']);\n```\n\n**NOTE:** if you are using it without Bootstrap you may need to add some css to your stylesheets to reflect the activation state of links. I.e.\n\n``` css\na.active {\n  color: blue;\n}\n```\n\n*/\n(function () {\n  'use strict';\n\n  angular.module(\"mobile-angular-ui.core.activeLinks\", [])\n\n  .run([\n      '$rootScope', \n      '$window', \n      '$document',\n      '$location',\n      function($rootScope, $window, $document, $location){\n\n        var setupActiveLinks = function() {\n          // Excludes both search part and hash part from \n          // comparison.\n          var url = $location.url(),\n              firstHash = url.indexOf('#'),\n              firstSearchMark = url.indexOf('?'),\n              locationHref = $window.location.href,\n              plainUrlLength = locationHref.indexOf(url),\n              newPath;\n\n          if (firstHash === -1 && firstSearchMark === -1) {\n            newPath = locationHref;\n          } else if (firstHash !== -1 && firstHash > firstSearchMark) {\n            newPath = locationHref.slice(0, plainUrlLength + firstHash);\n          } else if (firstSearchMark !== -1 && firstSearchMark > firstHash) {\n            newPath = locationHref.slice(0, plainUrlLength + firstSearchMark);\n          }\n          \n          var domLinks = $document[0].links;\n          for (var i = 0; i < domLinks.length; i++) {\n            var domLink = domLinks[i];\n            var link    = angular.element(domLink);\n            if (link.attr('href') && link.attr('href') !== '' && domLink.href === newPath) {\n              link.addClass('active');\n            } else if (link.attr('href') && link.attr('href') !== '' && domLink.href && domLink.href.length) {\n              link.removeClass('active');\n            }\n          }\n        };\n\n        $rootScope.$on('$locationChangeSuccess', setupActiveLinks);\n        $rootScope.$on('$includeContentLoaded', setupActiveLinks);\n      }\n  ]);\n\n}());\n\n","/** \n * @module mobile-angular-ui.core.capture\n * @description\n * \n * The `capture` module exposes directives to let you extract markup which can be used in other parts of a template using `uiContentFor` and `uiYieldTo` directives.\n * \n * It provides a way to move or clone a block of markup to other parts of the document.\n * \n * This method is particularly useful to setup parts of the layout within an angular view. Since blocks of html are transplanted within their original `$scope` is easy to create layout interactions depending on the context. Some tipical task you can accomplish with these directives are: _setup the navbar title depending on the view_ or _place a submit button for a form inside a navbar_.\n * \n * ## Usage\n * \n * Declare it as a dependency to your app unless you have already included some of its super-modules.\n * \n * ```\n * angular.module('myApp', ['mobile-angular-ui']);\n * ```\n * \n * Or\n * \n * ```\n * angular.module('myApp', ['mobile-angular-ui']);\n * ```\n * \n * Or\n * \n * ```\n * angular.module('myApp', ['mobile-angular-ui.core.capture']);\n * ```\n * \n * Use `ui-yield-to` as a placeholder.\n * \n * ``` html\n * <!-- index.html -->\n * \n * <div class=\"navbar\">\n *   <div ui-yield-to=\"title\" class=\"navbar-brand\">\n *     <span>Default Title</span>\n *   </div>\n * </div>\n * \n * <div class=\"app-body\">\n *   <ng-view class=\"app-content\"></ng-view>\n * </div>\n * ```\n * \n * Use `ui-content-for` inside any view to populate the `ui-yield-to` content.\n * \n * ``` html\n * <!-- myView.html -->\n * \n * <div ui-content-for=\"title\">\n *   <span>My View Title</span>\n * </div>\n * ```\n * \n * Since the original scope is preserved you can use directives inside `ui-content-for` blocks to interact with the current scope. In the following example we will add a navbar button to submit a form inside a nested view.  \n * \n * \n * ``` html\n * <!-- index.html -->\n * \n * <div class=\"navbar\">\n *   <div ui-yield-to=\"navbarAction\">\n *   </div>\n * </div>\n * \n * <div class=\"app-body\">\n *   <ng-view class=\"app-content\"></ng-view>\n * </div>\n * ```\n * \n * ``` html\n * <!-- newCustomer.html -->\n * \n * <form ng-controller=\"newCustomerController\">\n * \n *   <div class=\"inputs\">\n *     <input type=\"text\" ng-model=\"customer.name\" />  \n *   </div>\n * \n *   <div ui-content-for=\"navbarAction\">\n *     <button ng-click=\"createCustomer()\">\n *       Save\n *     </button>\n *   </div>\n * \n * </form>\n * ```\n * \n * ``` javascript\n * app.controller('newCustomerController', function($scope, Store){\n *   $scope.customer = {};\n *   $scope.createCustomer = function(){\n *     Store.create($scope.customer);\n *     // ...\n *   }\n * });\n * ```\n * \n * If you wish you can also duplicate markup instead of move it. Just add `duplicate` parameter to `uiContentFor` directive to specify this behaviour.\n * \n * ``` html\n * <div ui-content-for=\"navbarAction\" duplicate>\n *   <button ng-click=\"createCustomer()\">\n *     Save\n *   </button>\n * </div>\n * ```\n */\n(function () {\n   'use strict';\n\n   angular.module('mobile-angular-ui.core.capture', [])\n\n   .run([\n     'Capture', \n     '$rootScope', \n     function(Capture, $rootScope) {\n       $rootScope.$on('$routeChangeStart', function() {\n         Capture.resetAll();\n       });\n     }\n   ])\n\n   .factory('Capture', [\n     '$compile', \n     function($compile) {\n       var yielders = {};\n\n       return {\n         resetAll: function() {\n           for (var name in yielders) {\n            if (yielders.hasOwnProperty(name)) {\n              this.resetYielder(name); \n            }\n           }\n         },\n         \n         resetYielder: function(name) {\n           var b = yielders[name];\n           this.setContentFor(name, b.defaultContent, b.defaultScope);\n         },\n\n         putYielder: function(name, element, defaultScope, defaultContent) {\n           var yielder = {};\n           yielder.name = name;\n           yielder.element = element;\n           yielder.defaultContent = defaultContent || '';\n           yielder.defaultScope = defaultScope;\n           yielders[name] = yielder;\n         },\n\n         getYielder: function(name) {\n           return yielders[name];\n         },\n\n         removeYielder: function(name) {\n           delete yielders[name];\n         },\n         \n         setContentFor: function(name, content, scope) {\n           var b = yielders[name];\n           if (!b) {\n             return;\n           }\n           b.element.html(content);\n           $compile(b.element.contents())(scope);\n         }\n\n       };\n     }\n   ])\n\n  /**\n   * @directive uiContentFor\n   * @restrict A\n   * @description\n   * \n   * `ui-content-for` makes inner contents to replace the corresponding \n   * `ui-yield-to` placeholder contents.\n   *\n   * `uiContentFor` is intended to be used inside a view in order to populate outer placeholders.\n   * Any content you send to placeholders via `ui-content-for` is\n   * reverted to placeholder defaults after view changes (ie. on `$routeChangeStart`).\n   * \n   * @param {string} uiContentFor The id of the placeholder to be replaced\n   * @param {boolean} uiDuplicate If present duplicates the content instead of moving it (default to `false`)\n   *\n   */\n   .directive('uiContentFor', [\n     'Capture', \n     function(Capture) {\n       return {\n         compile: function(tElem, tAttrs) {\n           var rawContent = tElem.html();\n           if(tAttrs.uiDuplicate === null || tAttrs.uiDuplicate === undefined) {\n             // no need to compile anything!\n             tElem.html('');\n             tElem.remove();\n           }\n           return function(scope, elem, attrs) {\n             Capture.setContentFor(attrs.uiContentFor, rawContent, scope);\n           };\n         }\n       };\n     }\n   ])\n\n   /**\n    * @directive uiYieldTo\n    * @restrict A\n    * @description\n    *\n    * `ui-yield-to` defines a placeholder which contents will be further replaced by `ui-content-for` directive.\n    *\n    * Inner html is considered to be a default. Default is restored any time `$routeChangeStart` happens.\n    * \n    * @param {string} uiYieldTo The unique id of this placeholder.\n    *\n    */\n   .directive('uiYieldTo', [\n     '$compile', 'Capture', function($compile, Capture) {\n       return {\n         link: function(scope, element, attr) {\n           Capture.putYielder(attr.uiYieldTo, element, scope, element.html());\n           \n           element.on('$destroy', function(){\n             Capture.removeYielder(attr.uiYieldTo);\n           });\n           \n           scope.$on('$destroy', function(){\n             Capture.removeYielder(attr.uiYieldTo);\n           });\n         }\n       };\n     }\n   ]);\n\n}());","/**\n\n@module mobile-angular-ui.core.outerClick\n@description\n\nProvides a directive to specifiy a behaviour when click/tap events \nhappen outside an element. This can be easily used \nto implement eg. __close on outer click__ feature for a dropdown.\n\n## Usage\n\nDeclare it as a dependency to your app unless you have already \nincluded some of its super-modules.\n\n```\nangular.module('myApp', ['mobile-angular-ui']);\n```\n\nOr\n\n```\nangular.module('myApp', ['mobile-angular-ui.core']);\n```\n\nOr\n\n```\nangular.module('myApp', ['mobile-angular-ui.core.outerClick']);\n```\n\nUse `ui-outer-click` to define an expression to evaluate when an _Outer Click_ event happens.\nUse `ui-outer-click-if` parameter to define a condition to enable/disable the listener.\n\n``` html\n<div class=\"btn-group\">\n  <a ui-turn-on='myDropdown' class='btn'>\n    <i class=\"fa fa-ellipsis-v\"></i>\n  </a>\n  <ul \n    class=\"dropdown-menu\"\n    ui-outer-click=\"Ui.turnOff('myDropdown')\"\n    ui-outer-click-if=\"Ui.active('myDropdown')\"\n    role=\"menu\"\n    ui-show=\"myDropdown\" \n    ui-state=\"myDropdown\"\n    ui-turn-off=\"myDropdown\">\n\n    <li><a>Action</a></li>\n    <li><a>Another action</a></li>\n    <li><a>Something else here</a></li>\n    <li class=\"divider\"></li>\n    <li><a>Separated link</a></li>\n  </ul>\n</div>\n```\n\n*/\n(function () {\n   'use strict';\n\n   var isAncestorOrSelf = function(element, target) {\n     var parent = element;\n     while (parent.length > 0) {\n       if (parent[0] === target[0]) {\n         parent = null;\n         return true;\n       }\n       parent = parent.parent();\n     }\n     parent = null;\n     return false;\n   };\n\n   angular.module('mobile-angular-ui.core.outerClick', [])\n\n   /**\n    * @service bindOuterClick\n    * @as function\n    * \n    * @description\n    * This is a service function that binds a callback to be conditionally executed\n    * when a click event happens outside a specified element.\n    *\n    * Ie.\n    * \n    * ``` js\n    * app.directive('myDirective', function('bindOuterClick'){\n    *   return {\n    *     link: function(scope, element) {\n    *       bindOuterClick(element, function(scope, extra){\n    *         alert('You clicked ouside me!');\n    *       }, function(e){\n    *         return element.hasClass('disabled') ? true : false;\n    *       });\n    *     }\n    *   };\n    * });\n    * ```\n    * @scope {scope} the scope to eval callbacks\n    * @param {DomElement|$element} element The element to bind to. \n    * @param {function} callback A `function(scope, options)`, usually the result of `$parse`, that is called when an _outer click_ event happens.\n    * @param {string|function} condition Angular `$watch` expression to decide whether to run `callback` or not.\n    */\n   .factory('bindOuterClick', [\n     '$document',\n     '$timeout',\n     function ($document, $timeout) {\n       \n       return function (scope, element, outerClickFn, outerClickIf) {\n         var handleOuterClick = function(event){\n           if (!isAncestorOrSelf(angular.element(event.target), element)) {\n             scope.$apply(function() {\n               outerClickFn(scope, {$event:event});\n             });\n           }\n         };\n\n         var stopWatching = angular.noop;\n         var t = null;\n\n         if (outerClickIf) {\n           stopWatching = scope.$watch(outerClickIf, function(value){\n             $timeout.cancel(t);\n\n             if (value) {\n               // prevents race conditions \n               // activating with other click events\n               t = $timeout(function() {\n                 $document.on('click tap', handleOuterClick);\n               }, 0);\n\n             } else {\n               $document.unbind('click tap', handleOuterClick);    \n             }\n           });\n         } else {\n           $timeout.cancel(t);\n           $document.on('click tap', handleOuterClick);\n         }\n\n         scope.$on('$destroy', function(){\n           stopWatching();\n           $document.unbind('click tap', handleOuterClick);\n         });\n       };\n     }\n   ])\n\n\n  /**\n   * @directive outerClick\n   * \n   * @description\n   * Evaluates an expression when an _Outer Click_ event happens.\n   * \n   * @param {expression} uiOuterClick Expression to evaluate when an _Outer Click_ event happens.\n   * @param {expression} uiOuterClickIf Condition to enable/disable the listener. Defaults to `true`.\n   */\n   .directive('uiOuterClick', [\n     'bindOuterClick', \n     '$parse',\n     function(bindOuterClick, $parse){\n       return {\n         restrict: 'A',\n         compile: function(elem, attrs) {\n           var outerClickFn = $parse(attrs.uiOuterClick);\n           var outerClickIf = attrs.uiOuterClickIf;\n           return function(scope, elem) {\n             bindOuterClick(scope, elem, outerClickFn, outerClickIf);\n           };\n         }\n       };\n     }\n   ]);\n}());","(function() {\n  'use strict';  \n  /**\n   * @module mobile-angular-ui.core.sharedState\n   *\n   * @description\n   * `mobile-angular-ui.core.sharedState` is expose the homonymous service\n   * `SharedState` and a group of directives to access it.\n   *\n   * `SharedState` allows to use elementary angular or angularish directives\n   * to create interactive components.\n   *\n   * Ie.\n   *\n   * ``` html\n   * <div class=\"nav nav-tabs\" ui-state='activeTab'>\n   *   <a ui-set=\"{activeTab: 1}\">Tab1</a>\n   *   <a ui-set=\"{activeTab: 2}\">Tab2</a>\n   *   <a ui-set=\"{activeTab: 3}\">Tab3</a>\n   * </div>\n   * <div class=\"tabs\">\n   *   <div ui-if=\"activeTab == 1\">Tab1</div>\n   *   <div ui-if=\"activeTab == 2\">Tab2</div>\n   *   <div ui-if=\"activeTab == 3\">Tab3</div>\n   * </div>\n   * ```\n   * \n   * Using `SharedState` you will be able to:\n   * \n   * - Create interactive components without having to write javascript code\n   * - Have your controller free from UI logic\n   * - Separe `ng-click` triggering application logic from those having a visual effect only\n   * - Export state of components to urls\n   * - Easily make components comunicate each other\n   *\n   * Also note that:\n   *\n   * Data structures retaining statuses will stay outside angular scopes\n   * thus they are not evaluated against digest cycle until its necessary. \n   * Also although statuses are sort of global variables `SharedState` will \n   * take care of disposing them when no scopes are requiring them anymore.\n   * \n   * A set of `ui-*` directives are available to interact with `SharedState`\n   * module and will hopefully let you spare your controllers and your time \n   * for something that is more meaningful than this:\n   * \n   * ``` js\n   * $scope.activeTab = 1;\n   * \n   * $scope.setActiveTab = function(n) {\n   *   $scope.activeTab = n;\n   * };\n   * ```\n   * \n   * ## Usage\n   * \n   * Declare it as a dependency to your app unless you have already included some \n   * of its super-modules.\n   * \n   * ```\n   * angular.module('myApp', ['mobile-angular-ui.core.sharedState']);\n   * ```\n   * \n   * Use `ui-state` directive to require/initialize a state from the target element scope\n   * \n   * **Example.** Tabs\n   * \n   * <iframe class='embedded-example' src='/examples/tabs.html'></iframe>\n   *\n   * **Example.** Custom components\n   *\n   * <iframe class='embedded-example'  src='/examples/lightbulb.html'></iframe>\n   *\n   * NOTE: `ui-toggle/set/turnOn/turnOff` responds to `click/tap` without stopping propagation so you can use them along with ng-click too. You can also change events to respond to with `ui-triggers` attribute.\n   * \n   * Any `SharedState` method is exposed through `Ui` object in `$rootScope`. So you could always do `ng-click=\"Ui.turnOn('myVar')\"`.\n   * \n   * Since `SharedState` is a service you can initialize/set statuses through controllers too:\n   * \n   * ``` js\n   * app.controller('myController', function($scope, SharedState){\n   *   SharedState.initialize($scope, \"activeTab\", 3);\n   * });\n   * ```\n   * \n   * As well as you can use `ui-default` for that: \n   * \n   * ``` html\n   * <div class=\"tabs\" ui-state=\"activeTab\" ui-default=\"thisIsAnExpression(5 + 1 - 2)\"></div>\n   * ```\n   * \n   */\n  var module = angular.module('mobile-angular-ui.core.sharedState', []);\n\n  /**\n   * @ngdoc service\n   * @class SharedState\n   *\n   * @description\n   * \n   * A `SharedState` state can be considered as a global variable identified by an `id`.\n   * \n   * `SharedState` service exposes methods to interact with statuses to create, read and update states. \n   * \n   * It acts as a BUS between UI elements to share UI related state that is automatically disposed when all scopes requiring it are destroyed.\n   * \n   * eg.\n   * \n   * ``` js\n   * app.controller('controller1', function($scope, SharedState){\n   *   SharedState.initialize($scope, 'myId');\n   * });\n   * \n   * app.controller('controller2', function(SharedState){\n   *   SharedState.toggle('myId');\n   * });\n   * ```\n   * \n   * Data structures retaining statuses will stay outside angular scopes thus they are not evaluated against digest cycle until its necessary. Also although statuses are sort of global variables `SharedState` will take care of disposing them when no scopes are requiring them anymore.\n   * \n   * A set of `ui-*` directives are available to interact with `SharedState` module and will hopefully let you spare your controllers and your time for something that is more meaningful than this:\n   * \n   * ``` js\n   * $scope.activeTab = 1;\n   * \n   * $scope.setActiveTab = function(n) {\n   *   $scope.activeTab = n;\n   * };\n   * ```\n   *\n   */\n  \n   /**\n    * @event 'mobile-angular-ui.state.initialized.ID'\n    * @shortname initialized\n    * @memberOf mobile-angular-ui.core.sharedState~SharedState \n    * \n    * @description\n    * Broadcasted on `$rootScope` when `#initialize` is called for a new state not referenced by any scope currently.\n    * \n    * @param {any} currentValue The value with which this state has been initialized\n    * \n    * @memberOf mobile-angular-ui.core.sharedState~SharedState\n    */\n   \n   /**\n    * @event 'mobile-angular-ui.state.destroyed.ID'\n    * @shortname destroyed\n    * @memberOf mobile-angular-ui.core.sharedState~SharedState\n    * \n    * @description\n    * Broadcasted on `$rootScope` when a state is destroyed.         \n    * \n    */\n   \n    /**\n     * @event 'mobile-angular-ui.state.changed.ID'\n     * @shortname changed\n     * @memberOf mobile-angular-ui.core.sharedState~SharedState\n     * \n     * @description\n     * Broadcasted on `$rootScope` the value of a state changes.\n     * \n     * ``` js\n     * $scope.$on('mobile-angular-ui.state.changed.uiSidebarLeft', function(e, newVal, oldVal) {\n     *   if (newVal === true) {\n     *     console.log('sidebar opened');\n     *   } else {\n     *     console.log('sidebar closed');\n     *   }\n     * });\n     * ```\n     * \n     * @param {any} newValue\n     * @param {any} oldValue\n     * \n     */  \n\n  module.factory('SharedState', [\n    '$rootScope',\n    function($rootScope){\n      var values = {};    // values, context object for evals\n      var statusesMeta = {};  // status info\n      var scopes = {};    // scopes references\n      var exclusionGroups = {}; // support exclusive boolean sets\n\n      return {\n        /**\n         * @function initialize\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         *\n         * Initialize, or require if already intialized, a state identified by `id` within the provided `scope`, making it available to the rest of application.\n         * \n         * A `SharedState` is bound to one or more scopes. Each time `initialize` is called for an angular `scope` this will be bound to the `SharedState` and a reference count is incremented to allow garbage collection.\n         * \n         * Reference count is decremented once the scope is destroyed. When the counter reach 0 the state will be disposed.\n         * \n         * @param  {scope} scope The scope to bound this state\n         * @param  {string} id The unique name of this state \n         * @param  {object} [options] Options\n         * @param  {object} [options.defaultValue] the initialization value, it is taken into account only if the state `id` is not already initialized\n         * @param  {object} [options.exclusionGroup] Specifies an exclusion group for the state. This means that for boolean operations (ie. toggle, turnOn, turnOf) when this state is set to `true`, any other state that is in the same `exclusionGroup` will be set to `false`.\n         */\n        initialize: function(scope, id, options) {\n          options = options || {};\n          \n          var isNewScope = scopes[scope] === undefined,\n              defaultValue = options.defaultValue,\n              exclusionGroup = options.exclusionGroup;\n\n          scopes[scope.$id] = scopes[scope.$id] || [];\n          scopes[scope.$id].push(id);\n\n          if (!statusesMeta[id]) { // is a brand new state \n                                   // not referenced by any \n                                   // scope currently\n\n            statusesMeta[id] = angular.extend({}, options, {references: 1});\n\n            $rootScope.$broadcast('mobile-angular-ui.state.initialized.' + id, defaultValue);\n\n            if (defaultValue !== undefined) {\n              this.setOne(id, defaultValue);\n            }\n\n            if (exclusionGroup) {\n              // Exclusion groups are sets of statuses references\n              exclusionGroups[exclusionGroup] = exclusionGroups[exclusionGroup] || {};\n              exclusionGroups[exclusionGroup][id] = true;\n            }\n\n          } else if (isNewScope) { // is a new reference from \n                                   // a different scope\n            statusesMeta[id].references++; \n          }\n          scope.$on('$destroy', function(){\n            var ids = scopes[scope.$id] || [];\n            for (var i = 0; i < ids.length; i++) {\n              var status = statusesMeta[ids[i]];\n              \n              if (status.exclusionGroup) {\n                delete exclusionGroups[status.exclusionGroup][ids[i]];\n                if (Object.keys(exclusionGroups[status.exclusionGroup]).length === 0) {\n                  delete exclusionGroups[status.exclusionGroup];\n                }\n              }\n\n              status.references--;\n              if (status.references <= 0) {\n                delete statusesMeta[ids[i]];\n                delete values[ids[i]];\n                $rootScope.$broadcast('mobile-angular-ui.state.destroyed.' + id);\n              }\n            }\n            delete scopes[scope.$id];\n          });\n        },\n\n        /**\n         * @function setOne\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         *\n         * Set the value of the state identified by `id` to the `value` parameter.\n         *\n         * @param  {string} id Unique identifier for state\n         * @param  {any} value New value for this state\n         */\n        setOne: function(id, value) {\n          if (statusesMeta[id] !== undefined) {\n            var prev = values[id];\n            values[id] = value;\n            if (prev !== value) {\n              $rootScope.$broadcast('mobile-angular-ui.state.changed.' + id, value, prev);\n            }\n            return value;\n          } else {\n            /* global console: false */\n            if (console) {\n              console.warn('Warning: Attempt to set uninitialized shared state:', id);\n            }\n          }\n        },\n\n        /**\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * \n         * @function setMany\n         * @description\n         *\n         * Set multiple statuses at once. ie.\n         * \n         * ```\n         * SharedState.setMany({ activeTab: 'firstTab', sidebarIn: false });\n         * ```\n         * \n         * @param {object} object An object of the form `{state1: value1, ..., stateN: valueN}`\n         */\n        setMany: function(map) {\n          angular.forEach(map, function(value, id) {\n            this.setOne(id, value);\n          }, this);\n        },\n\n\n        /**\n         * @function set\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         * \n         * A shorthand for both `setOne` and `setMany`.\n         * When called with only one parameter that is an object \n         * it is the same of `setMany`, otherwise is the \n         * same of `setOne`.\n         * \n         * @param {string|object} idOrMap A state id or a `{state: value}` map object.\n         * @param {any} [value] The value to assign in case idOrMap is a string.\n         */\n        set: function(idOrMap, value) {\n          if (angular.isObject(idOrMap) && angular.isUndefined(value)) {\n            this.setMany(idOrMap);\n          } else {\n            this.setOne(idOrMap, value);\n          }\n        },\n\n        /**\n         * @function turnOn\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         * \n         * Set shared state identified by `id` to `true`. If the \n         * shared state has been initialized with `exclusionGroup` \n         * option it will also turn off (set to `false`) all other \n         * statuses from the same exclusion group.\n         * \n         * @param  {string} id The unique name of this state\n         */\n        turnOn: function(id) {\n          // Turns off other statuses belonging to the same exclusion group.\n          var eg = statusesMeta[id] && statusesMeta[id].exclusionGroup;\n          if (eg) {\n            var egStatuses = Object.keys(exclusionGroups[eg]);\n            for (var i = 0; i < egStatuses.length; i++) {\n              var item = egStatuses[i];\n              if (item !== id) {\n                this.turnOff(item);\n              }\n            }\n          }\n          return this.setOne(id, true);\n        },\n\n        /**\n         * @function turnOff\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * \n         * @description\n         * Set shared state identified by `id` to `false`.\n         *\n         * @param  {string} id The unique name of this state\n         */\n        turnOff: function(id) {\n          return this.setOne(id, false);\n        },\n\n        /**\n         * @function toggle\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         *\n         * If current value for shared state identified by `id` evaluates \n         * to `true` it calls `turnOff` on it otherwise calls `turnOn`. \n         * Be aware that it will take into account `exclusionGroup` option. \n         * See `#turnOn` and `#initialize` for more.\n         *\n         * @param  {string} id The unique name of this state\n         */\n        toggle: function(id) {\n          return this.get(id) ? this.turnOff(id) : this.turnOn(id);\n        },\n\n        /**\n         * @function get\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * \n         * @description\n         * Returns the current value of the state identified by `id`.\n         *\n         * @param  {string} id The unique name of this state\n         * @returns {any}\n         */\n        get: function(id) {\n          return statusesMeta[id] && values[id];\n        },\n\n        /**\n         * @function isActive\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         *\n         * Return `true` if the boolean conversion of `#get(id)` evaluates to `true`.\n         *\n         * @param  {string} id The unique name of this state\n         * @returns {bool}\n         */\n        isActive: function(id) {\n          return !! this.get(id);\n        },\n\n        /**\n         * @function active\n         * @alias mobile-angular-ui.core.sharedState~SharedState.isActive\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         * \n         * Alias for `#isActive`.\n         * \n         * @param  {string} id The unique name of this state\n         * @returns {bool}\n         */\n        active: function(id) {\n          return this.isActive(id);\n        },\n\n        /**\n         * @function isUndefined\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @description\n         * \n         * Return `true` if state identified by `id` is not defined.\n         * \n         * @param  {string} id The unique name of this state\n         * @returns {bool}\n         */\n        isUndefined: function(id) {\n          return statusesMeta[id] === undefined || this.get(id) === undefined;\n        },\n\n        /**\n         * Returns `true` if state identified by `id` exsists.\n         * \n         * @param  {string} id The unique name of this state\n         * @returns {bool}\n         * \n         * @function has\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         */\n        has: function(id) {\n          return statusesMeta[id] !== undefined;\n        },\n\n        /**\n         * Returns the number of references of a status.\n         * \n         * @param  {string} id The unique name of this state\n         * @returns {integer}\n         * \n         * @function referenceCount\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         */\n        referenceCount: function(id) {\n          var status = statusesMeta[id];\n          return status === undefined ? 0 : status.references;\n        },\n\n        /**\n         * Returns `true` if `#get(id)` is exactly equal (`===`) to `value` param.\n         *\n         * @param  {string} id The unique name of this state\n         * @param  {any} value The value for comparison\n         * @returns {bool} \n         * \n         * @function equals\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         */\n        equals: function(id, value) {\n          return this.get(id) === value;\n        },\n\n\n        /**\n         * Alias for `#equals`\n         * \n         * @param  {string} id The unique name of this state\n         * @param  {any} value The value for comparison\n         * @returns {bool} \n         * \n         * @function eq\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         * @alias mobile-angular-ui.core.sharedState~SharedState.equals\n         */\n        eq: function(id, value) {\n          return this.equals(id, value);\n        },\n\n        /**\n         * Returns an object with all the status values currently stored. \n         * It has the form of `{statusId: statusValue}`.\n         * \n         * Bear in mind that in order to spare resources it currently \n         * returns just the internal object retaining statuses values. \n         * Thus it is not intended to be modified and direct changes to it will be not tracked or notified.\n         * \n         * Just clone before apply any change to it.\n         * \n         * @returns {object}\n         * \n         * @function values\n         * @memberOf mobile-angular-ui.core.sharedState~SharedState\n         */\n        values: function() {\n          return values;\n        }\n  \n      };\n    }\n  ]);\n\n  var uiBindEvent = function(scope, element, eventNames, fn){\n    eventNames = eventNames || 'click tap';\n    element.on(eventNames, function(event){\n      scope.$apply(function() {\n        fn(scope, {$event:event});\n      });\n    });\n  };\n\n  /**\n   * Calls `SharedState#initialize` on the scope relative to the element using it.\n   * \n   * @param {string} uiState The shared state id\n   * @param {expression} [uiDefault] the default value\n   * \n   * @directive uiState\n   */\n  module.directive('uiState', [\n    'SharedState',\n    function(SharedState){\n      return {\n        restrict: 'EA',\n        priority: 601, // more than ng-if\n        link: function(scope, elem, attrs){\n          var id               = attrs.uiState || attrs.id,\n              defaultValueExpr = attrs.uiDefault || attrs['default'],\n              defaultValue     = defaultValueExpr ? scope.$eval(defaultValueExpr) : undefined;\n\n          SharedState.initialize(scope, id, {\n            defaultValue: defaultValue,\n            exclusionGroup: attrs.uiExclusionGroup\n          });\n        }\n      };\n    }\n  ]);\n\n  angular.forEach(['toggle', 'turnOn', 'turnOff', 'set'], \n    function(methodName){\n      var directiveName = 'ui' + methodName[0].toUpperCase() + methodName.slice(1);\n\n      /**\n       * Calls `SharedState#toggle` when triggering events happens on the element using it.\n       * \n       * @param {string} uiToggle the target shared state\n       * @param {expression} uiDefault the default value\n       *\n       * @directive uiToggle\n       */\n      \n      /**\n       * @function uiTurnOn\n       * \n       * @description\n       * Calls `SharedState#turnOn` when triggering events happens on the element using it.\n       *\n       * \n       * @ngdoc directive\n       * \n       * @param {string} uiTurnOn the target shared state\n       * @param {expression} uiDefault the default value\n       */\n\n      /**\n       * @function uiTurnOff\n       * \n       * @description\n       * Calls `SharedState#turnOff` when triggering events happens on the element using it.\n       * \n       * @ngdoc directive\n       * \n       * @param {string} uiTurnOff the target shared state\n       * @param {string} [uiTriggers='click tap'] the event triggering the call.\n       */\n\n      /**\n       * @function uiSet\n       * \n       * @description\n       * Calls `SharedState#set` when triggering events happens on the element using it.\n       * \n       * @ngdoc directive\n       * \n       * @param {object} uiSet The object to pass to SharedState#set\n       * @param {string} [uiTriggers='click tap'] the event triggering the call.\n       */\n      \n      module.directive(directiveName, [\n        '$parse',\n        '$interpolate',\n        'SharedState',\n        function($parse, $interpolate, SharedState) {\n              var method = SharedState[methodName];\n              return {\n                restrict: 'A',\n                priority: 1, // This would make postLink calls happen after ngClick \n                             // (and similar) ones, thus intercepting events after them.\n                             // \n                             // This will prevent eventual ng-if to detach elements \n                             // before ng-click fires.\n\n                compile: function(elem, attrs) {\n                  var attr = attrs[directiveName];\n                  var needsInterpolation = attr.match(/\\{\\{/);\n                  \n                  var exprFn = function($scope) {\n                    var res = attr;\n                    if (needsInterpolation) {\n                      var interpolateFn = $interpolate(res);\n                      res = interpolateFn($scope);\n                    }\n                    if (methodName === 'set') {\n                      res = ($parse(res))($scope);    \n                    }\n                    return res;                                          \n                  };\n\n                  return function(scope, elem, attrs) {\n                    var callback = function() {\n                      var arg = exprFn(scope);\n                      return method.call(SharedState, arg);\n                    };\n                    uiBindEvent(scope, elem, attrs.uiTriggers, callback);\n                  };\n                }\n              };\n            }\n      ]);\n    });\n\n /**\n  * @name uiScopeContext\n  * @inner \n  * @description\n  * \n  * `uiScopeContext` is not a directive, but a parameter common to any of the \n  * `ui-*` directives in this module.\n  *\n  * By default all `ui-*` conditions in this module evaluates in the context of \n  * `SharedState` only, thus scope variable are not accessible. To use them you have \n  * two options:\n  *\n  * #### 1. pre-interpolation\n  * \n  * You can use pre-interpolation in expression attribute. For instance the following syntax\n  * is ligit:\n  * \n  * ``` html\n  * <div ui-if='state{{idx}}'><!-- ... --></div>\n  * ```\n  *\n  * In this case `idx` value is taken from scope and embedded into\n  * conditions before parse them.\n  *\n  * This works as expected and is fine for the most cases, but it has a little caveat:\n  *\n  * The condition has to be re-parsed at each digest loop and has to walk scopes \n  * in watchers.\n  *\n  * #### 2. uiScopeContext\n  *\n  * If you are concerned about performance issues using the first approach \n  * `uiScopeContext` is a more verbose but also lightweight alternative \n  * to accomplish the same.\n  *  \n  * It allows to use current scope vars inside `ui-*` conditions, leaving\n  * other scope vars (or the entire scope if not present) apart from the\n  * condition evaluation process.\n  * \n  * Hopefully this will keep evaluation running against a flat and small data \n  * structure instead of taking into account the whole scope. \n  * \n  * It is a list `scopeVar[ as aliasName] [, ...]` specifing one of more scope\n  * variables to take into account when evaluating conditions. ie:\n  * \n  * ``` html\n  * <!-- use item from ng-repeat -->\n  * <div ui-if=\"openPanel == i\" ui-scope-context='i' ng-repeat=\"i in [1,2,3]\">\n  *   <div class=\"panel-body\">\n  *     <!-- ... -->\n  *   </div>\n  * </div>\n  * ```\n  * \n  * ``` html\n  * <div ui-if=\"sharedState1 == myVar1 && sharedState2 == myVar2\"\n  *   ui-scope-context=\"myVar1, myVar2\"\n  * >\n  * </div>\n  * ```\n  * \n  * Be aware that scope vars will take precedence over sharedStates so,\n  * in order to avoid name clashes you can use 'as' to refer to scope vars\n  * with a different name in conditions:\n  * \n  * ``` html\n  * <div ui-if=\"x == myVar1 && y == myVar2\"\n  *   ui-scope-context=\"x as myVar1, y as myVar2\"\n  * >\n  * </div>\n  * ```\n  */\n  var parseScopeContext = function(attr) {\n    if (!attr || attr === '') {\n      return [];\n    }\n    var vars = attr ? attr.trim().split(/ *, */) : [];\n    var res = [];\n    for (var i = 0; i < vars.length; i++) {\n      var item = vars[i].split(/ *as */);\n      if (item.length > 2 || item.length < 1) {\n        throw new Error('Error parsing uiScopeContext=\"' + attr + '\"');\n      }\n      res.push(item);\n    }\n    return res;\n  };\n\n  var mixScopeContext = function(context, scopeVars, scope) {\n    for (var i = 0; i < scopeVars.length; i++) {\n      var key = scopeVars[i][0];\n      var alias = scopeVars[i][1] || key;\n      context[alias] = scope[key];\n    }\n  };\n\n  var parseUiCondition = function(name, attrs, $scope, SharedState, $parse, $interpolate) {\n    var expr = attrs[name];\n    var needsInterpolation = expr.match(/\\{\\{/);\n    var exprFn;\n\n    if (needsInterpolation) {\n      exprFn = function(context) {\n        var interpolateFn = $interpolate(expr);\n        var parseFn = $parse(interpolateFn($scope));\n        return parseFn(context);\n      };\n    } else {\n      exprFn = $parse(expr);\n    }\n\n    var uiScopeContext = parseScopeContext(attrs.uiScopeContext);\n    return function() {\n      var context;\n      if (uiScopeContext.length) {\n        context = angular.extend({}, SharedState.values());\n        mixScopeContext(context, uiScopeContext, $scope);  \n      } else {\n        context = SharedState.values();\n      }\n      return exprFn(context);\n    };\n  };\n\n  \n /**\n  * @ngdoc directive\n  * @function uiIf\n  * \n  * @description \n  * Same as `ngIf` but evaluates condition against `SharedState` statuses too\n  * \n  * @param {expression} uiIf A condition to decide wether to attach the element to the dom\n  * @param {list} [uiScopeContext] A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.\n  */ \n  module.directive('uiIf', ['$animate', 'SharedState', '$parse', '$interpolate', function($animate, SharedState, $parse, $interpolate) {\n    function getBlockNodes(nodes) {\n      var node = nodes[0];\n      var endNode = nodes[nodes.length - 1];\n      var blockNodes = [node];\n      do {\n        node = node.nextSibling;\n        if (!node) { break; }\n        blockNodes.push(node);\n      } while (node !== endNode);\n\n      return angular.element(blockNodes);\n    }\n\n    return {\n      multiElement: true,\n      transclude: 'element',\n      priority: 600,\n      terminal: true,\n      restrict: 'A',\n      $$tlb: true,\n      link: function ($scope, $element, $attr, ctrl, $transclude) {\n          var block, childScope, previousElements, \n          uiIfFn = parseUiCondition('uiIf', $attr, $scope, SharedState, $parse, $interpolate);\n\n          $scope.$watch(uiIfFn, function uiIfWatchAction(value) {\n            if (value) {\n              if (!childScope) {\n                $transclude(function (clone, newScope) {\n                  childScope = newScope;\n                  clone[clone.length++] = document.createComment(' end uiIf: ' + $attr.uiIf + ' ');\n                  // Note: We only need the first/last node of the cloned nodes.\n                  // However, we need to keep the reference to the jqlite wrapper as it might be changed later\n                  // by a directive with templateUrl when its template arrives.\n                  block = {\n                    clone: clone\n                  };\n                  $animate.enter(clone, $element.parent(), $element);\n                });\n              }\n            } else {\n              if (previousElements) {\n                previousElements.remove();\n                previousElements = null;\n              }\n              if (childScope) {\n                childScope.$destroy();\n                childScope = null;\n              }\n              if (block) {\n                previousElements = getBlockNodes(block.clone);\n                var done = function() {\n                  previousElements = null;\n                };\n                var nga = $animate.leave(previousElements, done);\n                if (nga) {\n                  nga.then(done);\n                }\n                block = null;\n              }\n            }\n          });\n      }\n    };\n  }]);\n\n  \n  /**\n   * @ngdoc directive \n   * @function uiHide\n   * \n   * @description\n   * Same as `ngHide` but evaluates condition against `SharedState` statuses\n   * \n   * @param {expression} uiShow A condition to decide wether to hide the element\n   * @param {list} [uiScopeContext] A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.\n   */ \n  module.directive('uiHide', ['$animate', 'SharedState', '$parse', '$interpolate', function($animate, SharedState, $parse, $interpolate) {\n    var NG_HIDE_CLASS = 'ng-hide';\n    var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';\n\n    return {\n      restrict: 'A',\n      multiElement: true,\n      link: function(scope, element, attr) {\n        var uiHideFn = parseUiCondition('uiHide', attr, scope, SharedState, $parse, $interpolate);\n        scope.$watch(uiHideFn, function uiHideWatchAction(value){\n          $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {\n            tempClasses : NG_HIDE_IN_PROGRESS_CLASS\n          });\n        });\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive \n   * @function uiShow\n   * \n   * @description\n   * Same as `ngShow` but evaluates condition against `SharedState` statuses\n   * \n   * @param {expression} uiShow A condition to decide wether to show the element\n   * @param {list} [uiScopeContext] A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.\n   */ \n  module.directive('uiShow', ['$animate', 'SharedState', '$parse', '$interpolate', function($animate, SharedState, $parse) {\n    var NG_HIDE_CLASS = 'ng-hide';\n    var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';\n\n    return {\n      restrict: 'A',\n      multiElement: true,\n      link: function(scope, element, attr) {\n        var uiShowFn = parseUiCondition('uiShow', attr, scope, SharedState, $parse);\n        scope.$watch(uiShowFn, function uiShowWatchAction(value){\n          $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {\n            tempClasses : NG_HIDE_IN_PROGRESS_CLASS\n          });\n        });\n      }\n    };\n  }]);\n\n  /**\n   * @ngdoc directive \n   * @function uiClass\n   * \n   * @description\n   * A simplified version of `ngClass` that evaluates in context of `SharedState`, it only suppors the `{'className': expr}` syntax.\n   * \n   * @param {expression} uiClass An expression that has to evaluate to an object of the form `{'className': expr}`, where `expr` decides wether the class should appear to element's class list.\n   * @param {list} [uiScopeContext] A list `scopeVar[ as aliasName] [, ...]` specifing one of more scope variables to take into account when evaluating condition.\n   */ \n  module.directive('uiClass', ['SharedState', '$parse', '$interpolate', function(SharedState, $parse) {\n    return {\n      restrict: 'A',\n      link: function(scope, element, attr) {\n        var uiClassFn = parseUiCondition('uiClass', attr, scope, SharedState, $parse);\n        scope.$watch(uiClassFn, function uiClassWatchAction(value){\n          var classesToAdd = '';\n          var classesToRemove = '';\n          angular.forEach(value, function(expr, className) {\n            if (expr) {\n              classesToAdd += ' ' + className;\n            } else {\n              classesToRemove += ' ' + className;\n            }\n            classesToAdd = classesToAdd.trim();\n            classesToRemove = classesToRemove.trim();\n            if (classesToAdd.length) {\n              element.addClass(classesToAdd);  \n            }\n            if (classesToRemove.length) {\n              element.removeClass(classesToRemove);\n            }\n          });\n        }, true);\n      }\n    };\n  }]);\n\n  module.run([\n    '$rootScope',\n    'SharedState',\n    function($rootScope, SharedState){\n      $rootScope.Ui = SharedState;\n    }\n  ]);\n\n\n}());\n","/**\n * Provides directives and service to prevent touchmove default behaviour \n * for touch devices (ie. bounce on overscroll in IOS).\n *\n * #### Usage\n *\n * Use `ui-prevent-touchmove-defaults` directive on root element of your app:\n * \n * ``` html\n * <body ng-app='myApp' ui-prevent-touchmove-defaults>\n *   <!-- ... -->\n * </body>\n * ```\n *\n * Doing so `touchmove.preventDefault` logic for inner elements is inverted,\n * so any `touchmove` default behaviour is automatically prevented.\n * \n * If you wish to allow the default behaviour, for example to allow \n * inner elements to scroll, you have to explicitly mark an event to allow \n * touchmove default.\n *\n * Mobile Angular UI already handles this for `scrollable` elements, so you don't have\n * to do anything in order to support scroll.\n *\n * If you wish to allow touchmove defaults for certain element under certain conditions\n * you can use the `allowTouchmoveDefault` service.\n *\n * ie.\n * \n * ``` js\n * // always allow touchmove default for an element\n * allowTouchmoveDefault(myelem);\n * ```\n * \n * ``` js\n * // allow touchmove default for an element only under certain conditions\n * allowTouchmoveDefault(myelem, function(touchmove){\n *   return touchmove.pageY > 100;\n * });\n * ```\n * \n * @module mobile-angular-ui.core.touchmoveDefaults\n */\n(function () {\n  'use strict';\n  var module = angular.module('mobile-angular-ui.core.touchmoveDefaults', []);\n\n  module.directive('uiPreventTouchmoveDefaults', function() {\n    var preventTouchmoveDefaultsCb = function(e) {\n      if (e.allowTouchmoveDefault !== true) {\n        e.preventDefault();\n      }\n    };\n\n    return {\n      compile: function(element) {\n        if ('ontouchmove' in document) {\n          element.on('touchmove', preventTouchmoveDefaultsCb);\n        }\n      }\n    };\n  });\n\n  /**\n   * Bind a listener to an element to allow `touchmove` default behaviour\n   * when `touchmove` happens inside the bound element.\n   * \n   * You can also provide a function to decide when to allow and \n   * when to prevent it.\n   *\n   * ``` js\n   * // always allow touchmove default\n   * allowTouchmoveDefault(myelem);\n   * \n   * // allow touchmove default only under certain conditions\n   * allowTouchmoveDefault(myelem, function(touchmove){\n   *   return touchmove.pageY > 100;\n   * });\n   * ```\n   *\n   * @param {Element|$element} element The element to bind.\n   * @param {function} condition A `function(touchmove)⟶boolean` to decide\n   *                             whether to allow default behavior or not. \n   * \n   * @service allowTouchmoveDefault\n   * @as function\n   * @returns function Function to unbind the listener\n   */\n  \n  module.factory('allowTouchmoveDefault', function(){\n    var fnTrue = function() { return true; };\n\n    if ('ontouchmove' in document) {\n        return function($element, condition) {\n          condition = condition || fnTrue;\n\n          var allowTouchmoveDefaultCallback = function(e) {\n            if (condition(e)) { e.allowTouchmoveDefault = true; }\n          };\n\n          $element = angular.element($element);\n          $element.on('touchmove',  allowTouchmoveDefaultCallback);\n\n          $element.on('$destroy', function() {\n            $element.off('touchmove', allowTouchmoveDefaultCallback);\n            $element = null;\n          });\n\n          return function() {\n            if ($element) {\n              $element.off('touchmove', allowTouchmoveDefaultCallback);              \n            }\n          };\n        };\n    } else {\n      return angular.noop;\n    }\n  });\n\n}());"],"sourceRoot":"/source/"}